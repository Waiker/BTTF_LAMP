#include <Adafruit_NeoPixel.h>
#include <EEPROM.h> // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞–º–∏

#define PIN         4           // –ü–∏–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ª–µ–Ω—Ç—ã
#define NUMPIXELS   18          // –ö–æ–ª-–≤–æ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–≤
#define BUTTON_PIN  A1          // –ö–Ω–æ–ø–∫–∞ (–∞–Ω–∞–ª–æ–≥–æ–≤–∞—è)

// –ò–Ω–¥–µ–∫—Å—ã EEPROM
#define EEPROM_MODE_ADDR       0
#define EEPROM_BRIGHTNESS_ADDR 1

Adafruit_NeoPixel strip(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);

// –Ø—Ä–∫–æ—Å—Ç–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
uint8_t brightnessLevels[] = {50, 100, 180, 255};
uint8_t brightnessIndex = 3;

uint8_t mode = 0;
const uint8_t modeCount = 8; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∂–∏–º–æ–≤

unsigned long lastButtonPress = 0;
bool buttonHeld = false;

// ============================ SETUP =============================
void setup() {
  pinMode(BUTTON_PIN, INPUT);
  strip.begin();

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∂–∏–º–∞ –∏ —è—Ä–∫–æ—Å—Ç–∏ –∏–∑ EEPROM
  mode = EEPROM.read(EEPROM_MODE_ADDR);
  brightnessIndex = EEPROM.read(EEPROM_BRIGHTNESS_ADDR);
  if (mode >= modeCount) mode = 0;
  if (brightnessIndex >= sizeof(brightnessLevels)) brightnessIndex = sizeof(brightnessLevels) - 1;

  strip.setBrightness(brightnessLevels[brightnessIndex]);
  strip.show();

  Serial.begin(9600);
}

// ============================ LOOP ==============================
void loop() {
  handleButton();
  runEffect(mode);
}

// ===================== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò =========================
void handleButton() {
  static bool lastState = false;
  bool currentState = analogRead(BUTTON_PIN) > 50;

  // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞
  if (currentState && !lastState) {
    lastButtonPress = millis();
    buttonHeld = false;
  }

  // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—É—â–µ–Ω–∞
  if (!currentState && lastState) {
    // –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ ‚Äî —Å–º–µ–Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞
    if (!buttonHeld && millis() - lastButtonPress < 500) {
      mode = (mode + 1) % modeCount;
      EEPROM.write(EEPROM_MODE_ADDR, mode); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ EEPROM
    }
    // –î–ª–∏–Ω–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ ‚Äî —Å–º–µ–Ω–∞ —è—Ä–∫–æ—Å—Ç–∏
    else if (buttonHeld) {
      brightnessIndex = (brightnessIndex + 1) % sizeof(brightnessLevels);
      strip.setBrightness(brightnessLevels[brightnessIndex]);
      EEPROM.write(EEPROM_BRIGHTNESS_ADDR, brightnessIndex); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ EEPROM
    }
  }

  // –î–µ—Ä–∂–∏–º –∫–Ω–æ–ø–∫—É –¥–æ–ª—å—à–µ 1 —Å–µ–∫ ‚Äî –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
  if (currentState && (millis() - lastButtonPress > 1000)) {
    buttonHeld = true;
  }

  lastState = currentState;
}

// ======================= –ó–ê–ü–£–°–ö –≠–§–§–ï–ö–¢–ê ========================
void runEffect(uint8_t m) {
  switch (m) {
    case 0: effectBackToFuture(); break; // üî• –≠—Ñ—Ñ–µ–∫—Ç –∏–∑ —Ñ–∏–ª—å–º–∞ "–ù–∞–∑–∞–¥ –≤ –±—É–¥—É—â–µ–µ" ‚Äî –∫—Ä–∞—Å–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π –æ–≥–æ–Ω—å
    case 1: effectElectricBlue(); break; // üî∑ –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —Å–∏–Ω–∏–π + –±–µ–ª–æ–µ —è–¥—Ä–æ
    case 2: effectPulsatingNeon(); break; // üåà –ü—É–ª—å—Å–∏—Ä—É—é—â–∏–π –Ω–µ–æ–Ω ‚Äî —Ü–≤–µ—Ç–∞ –ø–µ—Ä–µ–ª–∏–≤–∞—é—Ç—Å—è –≤ –¥—ã—Ö–∞–Ω–∏–∏
    case 3: effectGhostTrail(); break; // üëª –≠—Ñ—Ñ–µ–∫—Ç: "–ü—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ"
    case 4: effectClassic1(); break;
    case 5: effectClassic2(); break;
    case 6: effectClassic3(); break;
    case 7: effectOff(); break;
  }
}

// üî• –≠—Ñ—Ñ–µ–∫—Ç –∏–∑ —Ñ–∏–ª—å–º–∞ "–ù–∞–∑–∞–¥ –≤ –±—É–¥—É—â–µ–µ" ‚Äî –∫—Ä–∞—Å–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π –æ–≥–æ–Ω—å
void effectBackToFuture() {
  for (int i = 0; i < NUMPIXELS; i++) {
    if (i < 5 || i >= 11) {
      strip.setPixelColor(i, strip.Color(255, 0, 0));  // –ö—Ä–∞—Å–Ω—ã–π
    } else {
      strip.setPixelColor(i, strip.Color(255, 140, 0)); // –û—Ä–∞–Ω–∂–µ–≤—ã–π
    }
  }
  strip.show();
}

// üî∑ –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —Å–∏–Ω–∏–π + –±–µ–ª–æ–µ —è–¥—Ä–æ
void effectElectricBlue() {
  for (int i = 0; i < NUMPIXELS; i++) {
    if (i < 5 || i >= 11) {
      strip.setPixelColor(i, strip.Color(0, 0, 255));  // –°–∏–Ω–∏–π
    } else {
      strip.setPixelColor(i, strip.Color(200, 250, 255)); // –ë–µ–ª–æ-–≥–æ–ª—É–±–æ–π
    }
  }
  strip.show();
}

// üåà –ü—É–ª—å—Å–∏—Ä—É—é—â–∏–π –Ω–µ–æ–Ω ‚Äî —Ü–≤–µ—Ç–∞ –ø–µ—Ä–µ–ª–∏–≤–∞—é—Ç—Å—è –≤ –¥—ã—Ö–∞–Ω–∏–∏
void effectPulsatingNeon() {
  static uint8_t pulse = 0;
  static int8_t dir = 5;
  pulse += dir;
  if (pulse > 200 || pulse < 50) dir = -dir;

  for (int i = 0; i < NUMPIXELS; i++) {
    uint32_t color = strip.Color(pulse, 0, 255 - pulse); // –ü–µ—Ä–µ—Ö–æ–¥ –æ—Ç —Ä–æ–∑–æ–≤–æ-—Å–∏–Ω–µ–≥–æ –∫ —Å–∏–Ω–µ–º—É
    strip.setPixelColor(i, color);
  }
  strip.show();
  delay(30);
}

// üëª –≠—Ñ—Ñ–µ–∫—Ç: "–ü—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ"
void effectGhostTrail() {
  static int head = 0;
  static uint8_t fade = 40; // –ß–µ–º –±–æ–ª—å—à–µ ‚Äî –±—ã—Å—Ç—Ä–µ–µ –∑–∞—Ç—É—Ö–∞–µ—Ç

  // –ó–∞—Ç—É—Ö–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–∏–∫—Å–µ–ª–µ–π
  for (int i = 0; i < NUMPIXELS; i++) {
    uint32_t c = strip.getPixelColor(i);

    uint8_t r = (c >> 16) & 0xFF;
    uint8_t g = (c >> 8)  & 0xFF;
    uint8_t b = c & 0xFF;

    r = (r > fade) ? r - fade : 0;
    g = (g > fade) ? g - fade : 0;
    b = (b > fade) ? b - fade : 0;

    strip.setPixelColor(i, r, g, b);
  }

  // –Ø—Ä–∫–∏–π "—Å–ª–µ–¥" –¥–≤–∏–∂–µ—Ç—Å—è
  strip.setPixelColor(head, 255, 80, 10); // –Ø—Ä–∫–∏–π –æ—Ä–∞–Ω–∂–µ–≤—ã–π
  head = (head + 1) % NUMPIXELS;

  strip.show();
  delay(40);
}

// üî¥üü†üî¥ –ö—Ä–∞—Å–Ω—ã–π - –û—Ä–∞–Ω–∂–µ–≤—ã–π - –ö—Ä–∞—Å–Ω—ã–π (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ case 0)
void effectClassic1() {
  strip.clear();
  for (int i = 0; i < strip.numPixels(); i++) {
    if (i < 5 || i >= 11)
      strip.setPixelColor(i, strip.Color(255, 0, 0));      // –ö—Ä–∞—Å–Ω—ã–π
    else
      strip.setPixelColor(i, strip.Color(180, 140, 0));    // –û—Ä–∞–Ω–∂–µ–≤—ã–π
  }
  strip.show();
}

// üîµ‚ö™Ô∏èüîµ –°–∏–Ω–∏–π - –ì–æ–ª—É–±–æ–π - –°–∏–Ω–∏–π (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ case 1)
void effectClassic2() {
  strip.clear();
  for (int i = 0; i < strip.numPixels(); i++) {
    if (i < 5 || i >= 11)
      strip.setPixelColor(i, strip.Color(0, 0, 255));       // –°–∏–Ω–∏–π
    else
      strip.setPixelColor(i, strip.Color(200, 250, 255));   // –ì–æ–ª—É–±–æ–π
  }
  strip.show();
}

// üî¥üîµüî¥ –ö—Ä–∞—Å–Ω–æ-—Å–∏–Ω–∏–π –Ω–µ–æ–Ω (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ case 2)
void effectClassic3() {
  strip.clear();
  for (int i = 0; i < strip.numPixels(); i++) {
    if (i < 5 || i >= 11)
      strip.setPixelColor(i, strip.Color(255, 0, 10));      // –†–æ–∑–æ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π
    else
      strip.setPixelColor(i, strip.Color(0, 10, 255));      // –°–∏–Ω–∏–π
  }
  strip.show();
}

// üí° –í—ã–∫–ª—é—á–µ–Ω–æ
void effectOff() {
  strip.clear();
  strip.show();
}
